//
//  SearchInteractor.swift
//  Viewer
//
//  Created by Dario Suarez on 13/06/2019.
//  Copyright (c) 2019 Dario Suarez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchBusinessLogic {
    func doSearch(request: SearchScene.Search.Request)
}

protocol SearchDataStore {
    var searchResult: SearchResult? { get set }
}

class SearchInteractor: SearchBusinessLogic, SearchDataStore {
    var presenter: SearchPresentationLogic?
    var worker: SearchWorkerProtocol?
    var searchResult: SearchResult?

    init(worker: SearchWorkerProtocol) {
        self.worker = worker
    }
    
    func doSearch(request: SearchScene.Search.Request) {
        worker?.search(request.query,
                       success: { [weak self](result) in
                        guard let self = self else { return }
                        self.searchResult = result
                        let response = SearchScene.Search.Response(result: result)
                        self.presenter?.presentSearchResult(response: response)
        }, failure: { [weak self](err) in
            guard let self = self else { return }
            switch err {
            case .connectionTimeOut, .noInternetConnection:
                let response = NetworkingError.Response(message: "NO_INTERNET_ERROR")
                self.presenter?.presentNoInternetConnection(response: response)
            default:
                let response = NetworkingError.Response(message: "SERVICE_ERROR")
                self.presenter?.presentSearchError(response: response)
            }
        })
    }
}
