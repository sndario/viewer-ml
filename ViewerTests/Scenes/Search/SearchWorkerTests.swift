//
//  SearchWorkerTests.swift
//  Viewer
//
//  Created by Dario Suarez on 30/06/2019.
//  Copyright (c) 2019 Dario Suarez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Viewer
import XCTest

class SearchWorkerTests: XCTestCase {
    // MARK: Subject under test
    
    var networking: Networking!
    var worker: SearchWorker!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupSearchWorker()
    }
    
    override func tearDown() {
        worker = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSearchWorker() {
        networking = Networking()
        worker = SearchWorker(networking: networking)
    }
    // MARK: Tests
    
    func testSuccess() {
        // Given
        networking.session = NetworkingSessionMock.success(jsonResponse: "success_response")
        // When
        worker.search("test", success: { (result) in
            XCTAssertEqual(result?.query, "ipod")
            XCTAssertEqual(result?.siteId, "MLA")
        }) { (_) in
            XCTFail()
        }
    }
    
    func testFailure() {
        // Given
        networking.session = NetworkingSessionMock.failureTimeoutError()
        // When
        worker.search("test", success: { (result) in
            XCTFail()
        }) { (error) in
            XCTAssertEqual(error.code, URLError.timedOut.rawValue)
        }
    }
    
    func testEmptyPayload() {
        // Given
        networking.session = NetworkingSessionMock.empty()
        // When
        worker.search("test", success: { (result) in
            XCTAssertNil(result)
        }) { (error) in
            XCTFail()
        }
    }
}


struct NetworkingSessionMock {
    static func success(jsonResponse: String) -> URLSessionMock {
        let sessionMock = URLSessionMock()
        sessionMock.data = TestUtils.loadJson(jsonResponse)
        sessionMock.response = HTTPURLResponse(url: URL(string: "test.com")!,
                                               statusCode: 200,
                                               httpVersion: nil,
                                               headerFields: nil)
        return sessionMock
    }
    
    static func empty() -> URLSessionMock {
        let sessionMock = URLSessionMock()
        sessionMock.data = nil
        sessionMock.response = HTTPURLResponse(url: URL(string: "test.com")!,
                                               statusCode: 204,
                                               httpVersion: nil,
                                               headerFields: nil)
        return sessionMock
    }
    
    static func failureServer(jsonResponse: String) -> URLSessionMock {
        let sessionMock = URLSessionMock()
        sessionMock.data = TestUtils.loadJson(jsonResponse)
        sessionMock.response = HTTPURLResponse(url: URL(string: "test.com")!,
                                               statusCode: 200,
                                               httpVersion: nil,
                                               headerFields: nil)
        return sessionMock
    }
    
    static func failureTimeoutError() -> URLSessionMock {
        let sessionMock = URLSessionMock()
        sessionMock.error = URLError(.timedOut)
        return sessionMock
    }
    
    static func successWrongStatusCode(jsonResponse: String) -> URLSessionMock {
        let sessionMock = URLSessionMock()
        sessionMock.data = TestUtils.loadJson(jsonResponse)
        sessionMock.response = HTTPURLResponse(url: URL(string: "test.com")!,
                                               statusCode: 405,
                                               httpVersion: nil,
                                               headerFields: nil)
        return sessionMock
    }
    
    static func successWithEmptyWrongStatusCode() -> URLSessionMock {
        let sessionMock = URLSessionMock()
        sessionMock.response = HTTPURLResponse(url: URL(string: "test.com")!,
                                               statusCode: 405,
                                               httpVersion: nil,
                                               headerFields: nil)
        return sessionMock
    }
}
