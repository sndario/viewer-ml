//
//  SearchViewController.swift
//  Viewer
//
//  Created by Dario Suarez on 13/06/2019.
//  Copyright (c) 2019 Dario Suarez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class {
    func displaySearchResult(vm: SearchScene.Search.ViewModel)
    func displayNoInternetConnection(vm: NetworkingError.ViewModel)
    func displaySearchError(vm: NetworkingError.ViewModel)
}

class SearchViewController: UITableViewController {
    
    let searchController = UISearchController(searchResultsController: nil)
    var searchTask: DispatchWorkItem?
    var resultsVM: [SearchItemResultViewModel]?
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = SearchInteractor(worker: SearchWorker(networking: Networking()))
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }

    func setupUI() {
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = "Buscar producto"
        tableView.tableHeaderView = searchController.searchBar
        definesPresentationContext = true
        tableView.tableFooterView = UIView()
    }

    func showAlert(title: String,
                   message: String,
                   actionButtonTitle: String?,
                   action: (()->Void)?) {
        let alert = UIAlertController(title: title,
                                      message: message,
                                      preferredStyle: .alert)
        if let actionTitle = actionButtonTitle {
            alert.addAction(UIAlertAction(title: actionTitle,
                                          style: .default, handler: { (_) in
                                            action?()
            }))
        }
        present(alert, animated: true, completion: nil)
    }
}

extension SearchViewController {
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView,
                   numberOfRowsInSection section: Int) -> Int {
        return resultsVM?.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView,
                   heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    override func tableView(_ tableView: UITableView,
                   estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return 44
    }
    
    override func tableView(_ tableView: UITableView,
                   cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CustomCell",
                                                 for: indexPath) as! CustomTableViewCell
        let item = resultsVM?[indexPath.row]
        cell.fill(vm: item!)
        return cell
    }
    
    override func tableView(_ tableView: UITableView,
                   didSelectRowAt indexPath: IndexPath) {
        router?.navigateToDetail()
        tableView.deselectRow(at: indexPath, animated: true)
    }
}

extension SearchViewController: SearchDisplayLogic {
    func displaySearchResult(vm: SearchScene.Search.ViewModel) {
        resultsVM = vm.result
        tableView.reloadData()
    }
    
    func displaySearchError(vm: NetworkingError.ViewModel) {
        showAlert(title: vm.title,
                  message: vm.detail,
                  actionButtonTitle: nil,
                  action: nil)
    }
    
    func displayNoInternetConnection(vm: NetworkingError.ViewModel) {
        showAlert(title: vm.title,
                  message: vm.detail,
                  actionButtonTitle: "Reintentar",
                  action: {
                    let text = self.searchController.searchBar.text!
                    let request = SearchScene.Search.Request(query: text)
                    self.interactor?.doSearch(request: request)
        })
    }
}

extension SearchViewController: UISearchResultsUpdating {
    
    func updateSearchResults(for searchController: UISearchController) {
        let text = searchController.searchBar.text!
        searchTask?.cancel()
        if !text.isEmpty {
            let task = DispatchWorkItem { [weak self] in
                guard let self = self else { return }
                let request = SearchScene.Search.Request(query: text)
                self.interactor?.doSearch(request: request)
            }
            self.searchTask = task
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 1.0,
                                          execute: task)
        } else {
            resultsVM = nil
            tableView.reloadData()
        }
    }
    
}
