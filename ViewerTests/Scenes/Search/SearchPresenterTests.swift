//
//  SearchPresenterTests.swift
//  Viewer
//
//  Created by Dario Suarez on 30/06/2019.
//  Copyright (c) 2019 Dario Suarez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Viewer
import XCTest

class SearchPresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: SearchPresenter!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupSearchPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupSearchPresenter() {
        sut = SearchPresenter()
    }

    // MARK: Test doubles

    class SearchDisplayLogicSpy: SearchDisplayLogic {

        private(set) var displaySearchResultCalled = false
        private(set) var displayNoInternetConnectionCalled = false
        private(set) var displaySearchErrorCalled = false
        func displaySearchResult(vm: SearchScene.Search.ViewModel) {
            displaySearchResultCalled = true
        }
        
        func displayNoInternetConnection(vm: NetworkingError.ViewModel) {
            displayNoInternetConnectionCalled = true
        }
        
        func displaySearchError(vm: NetworkingError.ViewModel) {
            displaySearchErrorCalled = true
        }
    }

    // MARK: Tests

    func testPresentSearchResult() {
        // Given
        let spy = SearchDisplayLogicSpy()
        sut.viewController = spy
        let response = SearchScene.Search.Response(result: ObjectMock.searchResult)

        // When
        sut.presentSearchResult(response: response)

        // Then
        XCTAssertTrue(spy.displaySearchResultCalled, "")
    }
    
    func testPresentSearchNoInternet() {
        // Given
        let spy = SearchDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentNoInternetConnection(response: NetworkingError.Response(message: "test"))
        
        // Then
        XCTAssertTrue(spy.displayNoInternetConnectionCalled, "")
    }
    
    func testPresentSearchError() {
        // Given
        let spy = SearchDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentSearchError(response: NetworkingError.Response(message: "test"))
        
        // Then
        XCTAssertTrue(spy.displaySearchErrorCalled, "")
    }
}
