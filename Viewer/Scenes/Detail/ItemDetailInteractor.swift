//
//  ItemDetailInteractor.swift
//  Viewer
//
//  Created by Dario Suarez on 16/06/2019.
//  Copyright (c) 2019 Dario Suarez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemDetailBusinessLogic {
    func doLoad()
}

protocol ItemDetailDataStore {
    var item: SearchResultItem! { get set }
}

class ItemDetailInteractor: ItemDetailBusinessLogic, ItemDetailDataStore {
    var worker: ItemDetailWorkerProtocol?
    var presenter: ItemDetailPresentationLogic?
    var item: SearchResultItem!

    init(worker: ItemDetailWorkerProtocol) {
        self.worker = worker
    }
    
    func doLoad() {
        worker?.itemDetail(item.id,
                           success: { [weak self](itemDescription) in
                            guard let self = self else { return }
                            let response = ItemDetail.Load.Response(item: self.item,
                                                                    desc: itemDescription)
                            self.presenter?.presentItem(response: response)
        }, failure: { [weak self](error) in
            guard let self = self else { return }
            let response = ItemDetail.Load.Response(item: self.item,
                                                    desc: nil)
            self.presenter?.presentItem(response: response)
        })
    }
}
