//
//  SearchInteractorTests.swift
//  Viewer
//
//  Created by Dario Suarez on 30/06/2019.
//  Copyright (c) 2019 Dario Suarez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Viewer
import XCTest

class SearchInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: SearchInteractor!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupSearchInteractor()
    }

    override func tearDown() {
        super.tearDown()
        sut = nil
    }

    // MARK: Test setup

    func setupSearchInteractor() {
        sut = SearchInteractor(worker: SearchWorker(networking: Networking()))
    }

    // MARK: Test doubles

    class SearchPresentationLogicSpy: SearchPresentationLogic {
        
        private(set) var presentSearchResultCalled = false
        private(set) var presenNoInternetConnectionCalled = false
        private(set) var presentSearchErrorCalled = false
        
        func presentSearchResult(response: SearchScene.Search.Response) {
            presentSearchResultCalled = true
        }
        
        func presentNoInternetConnection(response: NetworkingError.Response) {
            presenNoInternetConnectionCalled = true
        }
        
        func presentSearchError(response: NetworkingError.Response) {
            presentSearchErrorCalled = true
        }
    }

    // MARK: Tests
    
    func testDoSearch() {
        // Given
        let spy = SearchPresentationLogicSpy()
        sut.presenter = spy
        let request = SearchScene.Search.Request(query: "test")
        let worker = SearchWorkerMock()
        worker.result = ObjectMock.searchResult
        sut.worker = worker
        // When
        sut.doSearch(request: request)

        // Then
        XCTAssertTrue(spy.presentSearchResultCalled, "")
    }
    
    func testDoSearchEmptyPayload() {
        // Given
        let spy = SearchPresentationLogicSpy()
        sut.presenter = spy
        let request = SearchScene.Search.Request(query: "test")
        let worker = SearchWorkerMock()
        sut.worker = worker
        // When
        sut.doSearch(request: request)
        
        // Then
        XCTAssertTrue(spy.presentSearchResultCalled, "")
    }
    
    func testDoSearchNoInternet() {
        // Given
        let spy = SearchPresentationLogicSpy()
        sut.presenter = spy
        let worker = SearchWorkerMock()
        worker.error = ViewerError(URLError(URLError.notConnectedToInternet))
        sut.worker = worker
        let request = SearchScene.Search.Request(query: "test")
        
        // When
        sut.doSearch(request: request)
        
        // Then
        XCTAssertTrue(spy.presenNoInternetConnectionCalled, "")
    }
    
    func testDoSearchError() {
        // Given
        let spy = SearchPresentationLogicSpy()
        sut.presenter = spy
        let worker = SearchWorkerMock()
        worker.error = ViewerError(URLError(URLError.badServerResponse))
        sut.worker = worker
        let request = SearchScene.Search.Request(query: "test")
        
        // When
        sut.doSearch(request: request)
        
        // Then
        XCTAssertTrue(spy.presentSearchErrorCalled, "")
    }
}

class SearchWorkerMock: SearchWorkerProtocol {
    
    var result: SearchResult?
    var error: ViewerError?
    
    func search(_ str: String,
                success: @escaping (SearchResult?) -> Void,
                failure: @escaping (ViewerError) -> Void) {
        if error != nil {
            failure(error!)
            return
        }
        success(result)
    }
    
}
