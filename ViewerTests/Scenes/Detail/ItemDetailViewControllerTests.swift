//
//  ItemDetailViewControllerTests.swift
//  Viewer
//
//  Created by Dario Suarez on 30/06/2019.
//  Copyright (c) 2019 Dario Suarez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Viewer
import XCTest

class ItemDetailViewControllerTests: XCTestCase {
    // MARK: Subject under test
    var sut: ItemDetailViewController!
    var window: UIWindow!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupItemDetailViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup
    
    func setupItemDetailViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "ItemDetailVC", bundle: bundle)
        sut = storyboard.instantiateInitialViewController() as? ItemDetailViewController
        let spy = ItemDetailBusinessLogicSpy()
        sut.interactor = spy
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles

    class ItemDetailBusinessLogicSpy: ItemDetailBusinessLogic {
        private(set) var doLoadCalled = false
        func doLoad() {
            doLoadCalled = true
        }
    }

    // MARK: Tests

    func testShouldDoSomethingWhenViewIsLoaded() {
        // Given
        let spy = ItemDetailBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()

        // Then
        XCTAssertTrue(spy.doLoadCalled, "")
    }

    func testDisplaySomething() {
        // Given
        let viewModel = ItemDetail.Load.ViewModel(name: "test",
                                                  type: "test",
                                                  image: "",
                                                  price: "200",
                                                  desc: "test description")

        // When
        loadView()
        sut.displayItem(viewModel: viewModel)

        // Then
        XCTAssertEqual(sut.itemNameLabel.text, viewModel.name, "")
        XCTAssertEqual(sut.itemTypeLabel.text, viewModel.type, "")
        XCTAssertEqual(sut.itemPriceLabel.text, viewModel.price, "")
        XCTAssertEqual(sut.itemDescriptionLabel.text, viewModel.desc, "")
    }
}
